name: Publish to GitHub / Pypi / DockerHub
on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ./tests/requirements.txt ]; then pip install -r ./tests/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: pytest

  build_and_publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Create modified .pypirc file
      # PyPI API token needs to be added to github secrets
      run: |
        echo "[distutils]
        index-servers =
            pypi

        [pypi]
          repository = https://upload.pypi.org/legacy/
          username = __token__
          password = ${{ secrets.PYPI_TOKEN}}
        " > ~/.pypirc
    - name: Upload python packages to PyPI
      run: make publish
    - name: Get Release Version
      run: echo "opal_version_tag=$(python -c "exec(open('setup/__version__.py').read()) ; print(__version__)")" >> $GITHUB_ENV
    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
            GithubRelease/*
        name: "v${{ env.opal_version_tag }}"
        tag_name: "${{ env.opal_version_tag }}"
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

  docker_build_and_publish:
    needs: build_and_publish
    runs-on: ubuntu-latest
    steps:
      # BUILD PHASE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get Release Version
        run: echo "opal_version_tag=$(python -c "exec(open('setup/__version__.py').read()) ; print(__version__)")" >> $GITHUB_ENV
      - name: Echo version tag
        run: |
          echo "The version tag that will be published to docker hub is: ${{ env.opal_version_tag }}"

      - name: Build client
        id: build_client
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          push: false
          target: client
          cache-from: type=registry,ref=authorizon/opal-client:latest
          cache-to: type=inline
          load: true
          tags: |
            authorizon/opal-client:test
            authorizon/opal-client:latest
            authorizon/opal-client:${{ env.opal_version_tag }}

      - name: Build client-standalone
        id: build_client_standalone
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          push: false
          target: client-standalone
          cache-from: type=registry,ref=authorizon/opal-client-standalone:latest
          cache-to: type=inline
          load: true
          tags: |
            authorizon/opal-client-standalone:test
            authorizon/opal-client-standalone:latest
            authorizon/opal-client-standalone:${{ env.opal_version_tag }}

      - name: Build server
        id: build_server
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          push: false
          target: server
          cache-from: type=registry,ref=authorizon/opal-server:latest
          cache-to: type=inline
          load: true
          tags: |
            authorizon/opal-server:test
            authorizon/opal-server:latest
            authorizon/opal-server:${{ env.opal_version_tag }}

      # TEST PHASE
      - name: Create modified docker compose file
        run: sed 's/:latest/:test/g' docker/docker-compose-example.yml > docker/docker-compose-test.yml

      - name: Bring up stack
        run: docker-compose -f docker/docker-compose-test.yml up -d

      - name: Check if OPA is healthy
        run: ./scripts/wait-for.sh -t 60 http://localhost:8181/v1/data/users -- sleep 10 && curl -s "http://localhost:8181/v1/data/users" | jq '.result.bob.location.country == "US"'

      - name: Output container logs
        run: docker-compose -f docker/docker-compose-test.yml logs

      # PUSH PHASE
      - name: Output local docker images
        run: docker image ls --digests | grep opal

      - name: Login to DockerHub
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # pushes the *same* docker images that were previously tested as part of e2e sanity test.
      # each image is pushed with the versioned tag first, if it succeeds the image is pushed with the latest tag as well.
      - name: Push client
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        run: docker push authorizon/opal-client:${{ env.opal_version_tag }} && docker push authorizon/opal-client:latest

      - name: Push client-standalone
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        run: docker push authorizon/opal-client-standalone:${{ env.opal_version_tag }} && docker push authorizon/opal-client-standalone:latest

      - name: Push server
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        run: docker push authorizon/opal-server:${{ env.opal_version_tag }} && docker push authorizon/opal-server:latest
